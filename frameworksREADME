April 12 2018
-------------

xcode project - start with empty project. COMMAND-SHIFT-N - Cross-platform.

- Move the project from  its own dir created to one dir up
- Add all the files (make sure to do scons -c to avoid including objects). Added folders: Create folder references.

 1. On the general project add "settings.xcconfig" configuration for debug and release

 2. add macos Library target "libraryName". Static STLC++ to archive the executable. Organization Identifier: mlibrary
    a. remove libraryName dir
    b. add source libraryName.cc in Compile Sources Build Phases

 3. Open Framework and library dir of interest

    Qt:     open $QTDIR/lib
	 geant4: open $G4ROOT/$GEANT4_VERSION/lib

	Drag needed to Build Phases Link with Libraries

 4. Add macos command line tool exampleName, C++, Organization Identifier:  libraryName.
    a. remove exampleName dir
    b  drag source exampleName.cc in Compile Sources build phase
    c. add libraryName in the target dependencies on Build Phases
    d. add libraryName link Binary with Libraries on Build Phases
    e. drag frameworks to Copy files, products location must match CONFIGURATION_BUILD_DIR
 	- no subpath
	- uncheck Copy only when installing
	- executables

 5. Build Settings: Code Signing: do not code sign

 6. For archiving purposes, in build phases copy necessary items in "executables destination", 
     - this includes the rcc file (in case it's needed, see qtButtonsWidget)
     - uncheck Copy only when installing
     To run the app by command line, add @executable_path to run path in Linking


Q_OBJECT and xcode
------------------

Select your target and in Build Rules make a new custom rule. 
Set the "Process" drop down to "Source files with names matching" and type in *.h next to that. 
Set the "Using" drop down to "Custom script:" and in the script type:

/path/to/your/Qt/bin/moc ${INPUT_FILE_PATH} -o ${DERIVED_FILE_DIR}/${INPUT_FILE_BASE}_moc.cpp
You'll have to change the path to wherever your moc executable is. Now set the "Output files" to:

${DERIVED_FILE_DIR}/${INPUT_FILE_BASE}_moc.cpp
That's it for the Custom Rule.

Now to get the headers to be compiled with this rule. While your target is still selected go to "Build Phases". 
Expand the "Compile Sources" section, hit the "+" button at the bottom. 
Find and add the header files with Q_OBJECT classes in them. 
Add those headers to your project first if you can't find them in there.

That's it, Xcode will then run moc on those headers and it will understand 
that the output from moc is a .cpp and needs to be compiled and linked into you app and do that for you.


REMAKE XCODE Projects
---------------------

The idea is to rename the current projects with an "O" at the end of the name, open it and create a new one.
The Old project will give directives on what to include.

See instructions above on creating empty project.

cd "/Users/ungaro/Library/Mobile Documents/com~apple~CloudDocs/xcode/mlibrary/"

set listTodo = (`\ls | grep ".xcodeproj" | grep -v "O.xcodeproj"`)

foreach p ($listTodo)
	set toRename = `echo $p | awk -F. '{print $1}'`
	echo $toRename
	mv $p $toRename"O.xcodeproj"
end


Order of projects

1. gstring
2. goptions

